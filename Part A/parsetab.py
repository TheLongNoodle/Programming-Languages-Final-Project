
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftMULTDIVMODrightNOTrightUMINUSAND ASSIGN COLON COMMA DEF DIV ELSE EQ FALSE GE GT ID IF LAMBDA LBRACE LE LPAREN LT MINUS MOD MULT NE NOT NUMBER OR PLUS PRINT RBRACE RETURN RPAREN SEMICOLON TRUEprogram : statementsstatements : statements statement\n                  | statementstatement : assignment\n                 | function_definition\n                 | if_statement\n                 | return_statement\n                 | print_statement\n                 | expression SEMICOLONassignment : ID ASSIGN expression SEMICOLONfunction_definition : DEF ID LPAREN function_args RPAREN LBRACE statements RBRACEfunction_args : function_args COMMA ID\n                     | ID\n                     | emptyfunction_call : ID LPAREN function_call_args RPARENfunction_call_args : function_call_args COMMA expression\n                          | expression\n                          | emptyif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n                    | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEreturn_statement : RETURN expression SEMICOLONlambda_expression : LAMBDA LPAREN function_args RPAREN COLON LBRACE statements RBRACE LPAREN function_call_args RPARENprint_statement : PRINT LPAREN expression RPAREN SEMICOLONexpression : NUMBER\n                  | ID\n                  | TRUE\n                  | FALSE\n                  | LPAREN expression RPAREN\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULT expression\n                  | expression DIV expression\n                  | expression MOD expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression %prec NOT\n                  | MINUS expression %prec UMINUS\n                  | function_call\n                  | lambda_expressionempty :'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,11,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,49,67,70,75,77,82,85,86,89,90,91,92,93,94,95,98,99,100,102,],[10,10,-3,-4,-5,-6,-7,-8,41,43,43,43,43,-2,-9,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,73,73,-21,-10,43,88,10,-23,10,10,10,10,-19,10,-11,10,43,10,-20,]),'DEF':([0,2,3,4,5,6,7,8,24,25,70,75,85,86,89,90,91,92,93,94,95,98,100,102,],[11,11,-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,11,-23,11,11,11,11,-19,11,-11,11,11,-20,]),'IF':([0,2,3,4,5,6,7,8,24,25,70,75,85,86,89,90,91,92,93,94,95,98,100,102,],[13,13,-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,13,-23,13,13,13,13,-19,13,-11,13,13,-20,]),'RETURN':([0,2,3,4,5,6,7,8,24,25,70,75,85,86,89,90,91,92,93,94,95,98,100,102,],[14,14,-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,14,-23,14,14,14,14,-19,14,-11,14,14,-20,]),'PRINT':([0,2,3,4,5,6,7,8,24,25,70,75,85,86,89,90,91,92,93,94,95,98,100,102,],[15,15,-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,15,-23,15,15,15,15,-19,15,-11,15,15,-20,]),'NUMBER':([0,2,3,4,5,6,7,8,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,70,75,77,85,86,89,90,91,92,93,94,95,98,99,100,102,],[16,16,-3,-4,-5,-6,-7,-8,16,16,16,16,-2,-9,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-21,-10,16,16,-23,16,16,16,16,-19,16,-11,16,16,16,-20,]),'TRUE':([0,2,3,4,5,6,7,8,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,70,75,77,85,86,89,90,91,92,93,94,95,98,99,100,102,],[17,17,-3,-4,-5,-6,-7,-8,17,17,17,17,-2,-9,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-21,-10,17,17,-23,17,17,17,17,-19,17,-11,17,17,17,-20,]),'FALSE':([0,2,3,4,5,6,7,8,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,70,75,77,85,86,89,90,91,92,93,94,95,98,99,100,102,],[18,18,-3,-4,-5,-6,-7,-8,18,18,18,18,-2,-9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-21,-10,18,18,-23,18,18,18,18,-19,18,-11,18,18,18,-20,]),'LPAREN':([0,2,3,4,5,6,7,8,10,12,13,14,15,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,46,70,75,77,85,86,89,90,91,92,93,94,95,97,98,99,100,102,],[12,12,-3,-4,-5,-6,-7,-8,40,12,44,12,46,12,12,49,-2,-9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,67,40,12,12,-21,-10,12,12,-23,12,12,12,12,-19,12,-11,99,12,12,12,-20,]),'NOT':([0,2,3,4,5,6,7,8,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,70,75,77,85,86,89,90,91,92,93,94,95,98,99,100,102,],[20,20,-3,-4,-5,-6,-7,-8,20,20,20,20,-2,-9,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-21,-10,20,20,-23,20,20,20,20,-19,20,-11,20,20,20,-20,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,12,14,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,70,71,75,76,77,83,85,86,89,90,91,92,93,94,95,98,99,100,102,103,],[19,19,-3,-4,-5,-6,-7,-8,27,-25,19,19,-24,-26,-27,19,19,-44,-45,-2,-9,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,27,-25,19,27,19,-43,-42,-29,-30,-31,-32,-33,27,27,27,27,27,27,27,27,27,27,-28,27,-21,27,-10,-15,19,27,19,-23,19,19,19,19,-19,19,-11,19,19,19,-20,-22,]),'LAMBDA':([0,2,3,4,5,6,7,8,12,14,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,70,75,77,85,86,89,90,91,92,93,94,95,98,99,100,102,],[23,23,-3,-4,-5,-6,-7,-8,23,23,23,23,-2,-9,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-21,-10,23,23,-23,23,23,23,23,-19,23,-11,23,23,23,-20,]),'$end':([1,2,3,4,5,6,7,8,24,25,70,75,86,93,95,102,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,-23,-19,-11,-20,]),'RBRACE':([3,4,5,6,7,8,24,25,70,75,86,90,92,93,94,95,100,102,],[-3,-4,-5,-6,-7,-8,-2,-9,-21,-10,-23,93,95,-19,97,-11,102,-20,]),'SEMICOLON':([9,10,16,17,18,21,22,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,76,80,103,],[25,-25,-24,-26,-27,-44,-45,-25,70,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,75,-28,-15,86,-22,]),'PLUS':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[26,-25,-24,-26,-27,-44,-45,26,-25,26,-43,-42,-29,-30,-31,-32,-33,26,26,26,26,26,26,26,26,26,26,-28,26,26,-15,26,-22,]),'MULT':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[28,-25,-24,-26,-27,-44,-45,28,-25,28,-43,-42,28,28,-31,-32,-33,28,28,28,28,28,28,28,28,28,28,-28,28,28,-15,28,-22,]),'DIV':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[29,-25,-24,-26,-27,-44,-45,29,-25,29,-43,-42,29,29,-31,-32,-33,29,29,29,29,29,29,29,29,29,29,-28,29,29,-15,29,-22,]),'MOD':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[30,-25,-24,-26,-27,-44,-45,30,-25,30,-43,-42,30,30,-31,-32,-33,30,30,30,30,30,30,30,30,30,30,-28,30,30,-15,30,-22,]),'GT':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[31,-25,-24,-26,-27,-44,-45,31,-25,31,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,31,31,31,31,31,31,-28,31,31,-15,31,-22,]),'LT':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[32,-25,-24,-26,-27,-44,-45,32,-25,32,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,32,32,32,32,32,32,-28,32,32,-15,32,-22,]),'GE':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[33,-25,-24,-26,-27,-44,-45,33,-25,33,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,33,33,33,33,33,33,-28,33,33,-15,33,-22,]),'LE':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[34,-25,-24,-26,-27,-44,-45,34,-25,34,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,34,34,34,34,34,34,-28,34,34,-15,34,-22,]),'EQ':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[35,-25,-24,-26,-27,-44,-45,35,-25,35,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,35,35,35,35,-28,35,35,-15,35,-22,]),'NE':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[36,-25,-24,-26,-27,-44,-45,36,-25,36,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,36,36,36,36,-28,36,36,-15,36,-22,]),'AND':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[37,-25,-24,-26,-27,-44,-45,37,-25,37,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,37,37,37,-28,37,37,-15,37,-22,]),'OR':([9,10,16,17,18,21,22,42,43,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,69,71,76,83,103,],[38,-25,-24,-26,-27,-44,-45,38,-25,38,-43,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,38,38,-28,38,38,-15,38,-22,]),'ASSIGN':([10,],[39,]),'RPAREN':([16,17,18,21,22,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,76,78,83,88,99,101,103,],[-24,-26,-27,-44,-45,-46,68,-25,-43,-42,-46,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,76,-17,-18,-46,-28,79,80,81,-13,-14,-15,84,-16,-12,-46,103,-22,]),'COMMA':([16,17,18,21,22,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,72,73,74,76,78,83,88,99,101,103,],[-24,-26,-27,-44,-45,-46,-25,-43,-42,-46,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,77,-17,-18,-46,-28,82,-13,-14,-15,82,-16,-12,-46,77,-22,]),'LBRACE':([79,84,87,96,],[85,89,91,98,]),'COLON':([81,],[87,]),'ELSE':([93,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,85,89,91,98,],[2,90,92,94,100,]),'statement':([0,2,85,89,90,91,92,94,98,100,],[3,24,3,3,24,3,24,24,3,24,]),'assignment':([0,2,85,89,90,91,92,94,98,100,],[4,4,4,4,4,4,4,4,4,4,]),'function_definition':([0,2,85,89,90,91,92,94,98,100,],[5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,85,89,90,91,92,94,98,100,],[6,6,6,6,6,6,6,6,6,6,]),'return_statement':([0,2,85,89,90,91,92,94,98,100,],[7,7,7,7,7,7,7,7,7,7,]),'print_statement':([0,2,85,89,90,91,92,94,98,100,],[8,8,8,8,8,8,8,8,8,8,]),'expression':([0,2,12,14,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,77,85,89,90,91,92,94,98,99,100,],[9,9,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,69,71,83,9,9,9,9,9,9,9,65,9,]),'function_call':([0,2,12,14,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,77,85,89,90,91,92,94,98,99,100,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'lambda_expression':([0,2,12,14,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,77,85,89,90,91,92,94,98,99,100,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'function_call_args':([40,99,],[64,101,]),'empty':([40,49,67,99,],[66,74,74,66,]),'function_args':([49,67,],[72,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','Parser.py',18),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',22),
  ('statements -> statement','statements',1,'p_statements','Parser.py',23),
  ('statement -> assignment','statement',1,'p_statement','Parser.py',30),
  ('statement -> function_definition','statement',1,'p_statement','Parser.py',31),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',32),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',33),
  ('statement -> print_statement','statement',1,'p_statement','Parser.py',34),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','Parser.py',35),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','Parser.py',39),
  ('function_definition -> DEF ID LPAREN function_args RPAREN LBRACE statements RBRACE','function_definition',8,'p_function_definition','Parser.py',43),
  ('function_args -> function_args COMMA ID','function_args',3,'p_function_args','Parser.py',47),
  ('function_args -> ID','function_args',1,'p_function_args','Parser.py',48),
  ('function_args -> empty','function_args',1,'p_function_args','Parser.py',49),
  ('function_call -> ID LPAREN function_call_args RPAREN','function_call',4,'p_function_call','Parser.py',56),
  ('function_call_args -> function_call_args COMMA expression','function_call_args',3,'p_function_call_args','Parser.py',60),
  ('function_call_args -> expression','function_call_args',1,'p_function_call_args','Parser.py',61),
  ('function_call_args -> empty','function_call_args',1,'p_function_call_args','Parser.py',62),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','Parser.py',69),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','Parser.py',70),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','Parser.py',77),
  ('lambda_expression -> LAMBDA LPAREN function_args RPAREN COLON LBRACE statements RBRACE LPAREN function_call_args RPAREN','lambda_expression',11,'p_lambda_expression','Parser.py',81),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','Parser.py',85),
  ('expression -> NUMBER','expression',1,'p_expression','Parser.py',89),
  ('expression -> ID','expression',1,'p_expression','Parser.py',90),
  ('expression -> TRUE','expression',1,'p_expression','Parser.py',91),
  ('expression -> FALSE','expression',1,'p_expression','Parser.py',92),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','Parser.py',93),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Parser.py',94),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Parser.py',95),
  ('expression -> expression MULT expression','expression',3,'p_expression','Parser.py',96),
  ('expression -> expression DIV expression','expression',3,'p_expression','Parser.py',97),
  ('expression -> expression MOD expression','expression',3,'p_expression','Parser.py',98),
  ('expression -> expression GT expression','expression',3,'p_expression','Parser.py',99),
  ('expression -> expression LT expression','expression',3,'p_expression','Parser.py',100),
  ('expression -> expression GE expression','expression',3,'p_expression','Parser.py',101),
  ('expression -> expression LE expression','expression',3,'p_expression','Parser.py',102),
  ('expression -> expression EQ expression','expression',3,'p_expression','Parser.py',103),
  ('expression -> expression NE expression','expression',3,'p_expression','Parser.py',104),
  ('expression -> expression AND expression','expression',3,'p_expression','Parser.py',105),
  ('expression -> expression OR expression','expression',3,'p_expression','Parser.py',106),
  ('expression -> NOT expression','expression',2,'p_expression','Parser.py',107),
  ('expression -> MINUS expression','expression',2,'p_expression','Parser.py',108),
  ('expression -> function_call','expression',1,'p_expression','Parser.py',109),
  ('expression -> lambda_expression','expression',1,'p_expression','Parser.py',110),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',169),
]
